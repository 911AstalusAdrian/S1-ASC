     1                                  
     2                                      ;Read two numbers a and b (in base 10) from the keyboard and calculate a/b. 
     3                                      ;This value will be stored in a variable called "result" (defined in the data segment). 
     4                                      ;The values are considered in signed representation.
     5                                  
     6                                  bits 32
     7                                  global start
     8                                  extern scanf, printf, exit
     9                                  import exit msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  segment data use32 class=data
    13 00000000 256400                      decimal_format db "%d", 0
    14 00000003 4769766520613A2000          message_a db "Give a: ", 0
    15 0000000C 4769766520623A2000          message_b db "Give b: ", 0
    16 00000015 00000000                    value_a dd 0
    17 00000019 00000000                    value_b dd 0
    18 0000001D 00000000                    result dd 0
    19                                  segment code use32 class=code
    20                                  start:
    21 00000000 68[03000000]                push dword message_a
    22 00000005 FF15[00000000]              call [printf]
    23 0000000B 83C404                      add esp, 4
    24                                      
    25 0000000E 68[15000000]                push dword value_a
    26 00000013 68[00000000]                push dword decimal_format
    27 00000018 FF15[00000000]              call [scanf]
    28 0000001E 83C408                      add esp, 4*2
    29                                      
    30 00000021 68[0C000000]                push dword message_b
    31 00000026 FF15[00000000]              call [printf]
    32 0000002C 83C404                      add esp, 4
    33                                      
    34 0000002F 68[19000000]                push dword value_b
    35 00000034 68[00000000]                push dword decimal_format
    36 00000039 FF15[00000000]              call [scanf]
    37 0000003F 83C408                      add esp, 4*2
    38                                      
    39 00000042 A1[15000000]                mov eax, [value_a]
    40 00000047 99                          cdq ; we convert EAX into EDX:EAX in the signed representation
    41 00000048 8B1D[19000000]              mov ebx, [value_b]
    42 0000004E F7FB                        idiv ebx  ;  EAX <- EDX:EAX / EBX, EDX <- EDX:EAX % EBX
    43                                      
    44 00000050 50                          push dword eax
    45 00000051 68[00000000]                push dword decimal_format
    46 00000056 FF15[00000000]              call [printf]
    47 0000005C 83C408                      add esp, 4*2
    48                                      
    49                                      
    50 0000005F 6A00                        push dword 0
    51 00000061 FF15[00000000]              call [exit]
