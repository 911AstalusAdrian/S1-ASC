     1                                  
     2                                      ; Read two numbers a and b (in base 10) from the keyboard and calculate their product. 
     3                                      ; This value will be stored in a variable called "result" (defined in the data segment).
     4                                  
     5                                  bits 32
     6                                  extern printf, exit, scanf
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import exit msvcrt.dll
    10                                  global start
    11                                  segment data use32 class=data
    12 00000000 256400                      decimal_format db "%d", 0
    13 00000003 5265616420613A2000          message_a db "Read a: ", 0
    14 0000000C 5265616420623A2000          message_b db "Read b: ", 0
    15 00000015 5468652070726F6475-         message_product db "The product a*b is: ", 13, 10
    15 0000001E 637420612A62206973-
    15 00000027 3A200D0A           
    16 0000002B 00000000                    result dd 0
    17 0000002F 0000                        number_a dw 0
    18 00000031 0000                        number_b dw 0
    19                                  segment code use32 class=code
    20                                  start:
    21                                      ;We print a message for the first number
    22 00000000 68[03000000]                push dword message_a
    23 00000005 FF15[00000000]              call [printf]
    24 0000000B 83C404                      add esp, 4
    25                                      
    26                                      ;We call scanf to read the number from the keyboard
    27 0000000E 68[2F000000]                push dword number_a
    28 00000013 68[00000000]                push dword decimal_format
    29 00000018 FF15[00000000]              call [scanf]
    30 0000001E 83C408                      add esp, 4*2
    31                                      
    32                                      ; We do the same things for the second number
    33 00000021 68[0C000000]                push dword message_b
    34 00000026 FF15[00000000]              call [printf]
    35 0000002C 83C404                      add esp, 4
    36                                      
    37 0000002F 68[31000000]                push dword number_b
    38 00000034 68[00000000]                push dword decimal_format
    39 00000039 FF15[00000000]              call [scanf]
    40 0000003F 83C408                      add esp, 4*2
    41                                      
    42 00000042 B800000000                  mov eax, 0
    43 00000047 66A1[2F000000]              mov ax, [number_a]
    44 0000004D BB00000000                  mov ebx, 0
    45 00000052 668B1D[31000000]            mov bx, [number_b]
    46                                  
    47 00000059 66F7E3                      mul bx
    48                                      ; DX:AX <- a*b
    49                                  
    50 0000005C 6652                        push dx
    51 0000005E 6650                        push ax
    52 00000060 58                          pop eax
    53 00000061 A3[2B000000]                mov [result], eax
    54                                      
    55                                      ;push decimal_format
    56 00000066 FF35[2B000000]              push dword [result]
    57 0000006C 68[00000000]                push decimal_format
    58 00000071 FF15[00000000]              call [printf]
    59 00000077 83C408                      add esp, 4*2
    60                                      
    61 0000007A 6A00                        push dword 0
    62 0000007C FF15[00000000]              call [exit]
    63                                      
    64                                      
