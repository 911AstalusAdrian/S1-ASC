     1                                  
     2                                      ; Read two numbers a and b (in base 10) from the keyboard. Calculate and print their arithmetic average in base 16
     3                                      
     4                                  bits 32
     5                                  global start        
     6                                  extern exit, printf, scanf            
     7                                  import exit msvcrt.dll    
     8                                  import printf msvcrt.dll
     9                                  import scanf msvcrt.dll 
    10                                  segment data use32 class=data
    11 00000000 00000000                	a dd 0 
    12 00000004 00000000                    b dd 0
    13 00000008 00000000                    c dd 0
    14 0000000C 476976652074686520-     	message_for_a db "Give the value a: ", 0
    14 00000015 76616C756520613A20-
    14 0000001E 00                 
    15 0000001F 476976652074686520-         message_for_b db "Give the value b: ", 0
    15 00000028 76616C756520623A20-
    15 00000031 00                 
    16 00000032 546865206172697468-         message_for_result db "The arithmetic average in base 16 is: ", 0
    16 0000003B 6D6574696320617665-
    16 00000044 7261676520696E2062-
    16 0000004D 617365203136206973-
    16 00000056 3A2000             
    17 00000059 256400                  	format_decimal  db "%d", 0  ; %d <=> a decimal number (base 10)
    18 0000005C 257800                      format_hexadecimal db "%x", 0 ; %x <=> an unsigned hexadecimal number (base 16)
    19                                      
    20                                  segment code use32 class=code
    21                                      start:
    22                                      
    23 00000000 68[0C000000]                push dword message_for_a
    24 00000005 FF15[00000000]              call [printf]
    25 0000000B 83C404                      add ESP, 4*1  
    26 0000000E 68[00000000]                push dword a
    27 00000013 68[59000000]                push dword format_decimal
    28 00000018 FF15[00000000]              call [scanf]
    29 0000001E 83C408                      add ESP, 4*2
    30                                      
    31 00000021 68[1F000000]                push dword message_for_b
    32 00000026 FF15[00000000]              call[printf]
    33 0000002C 83C404                      add ESP, 4*1
    34 0000002F 68[04000000]                push dword b
    35 00000034 68[59000000]                push dword format_decimal
    36 00000039 FF15[00000000]              call [scanf]
    37 0000003F 83C408                      add ESP, 4*2
    38                                      
    39 00000042 A1[00000000]                mov EAX, [a]
    40 00000047 8B1D[04000000]              mov EBX, [b]
    41 0000004D 01D8                        add EAX, EBX
    42 0000004F BA00000000                  mov EDX, 0
    43 00000054 BB02000000                  mov EBX, 2
    44 00000059 F7F3                        div EBX  
    45 0000005B A3[08000000]                mov [c], eax
    46                                      
    47 00000060 68[32000000]                push message_for_result
    48 00000065 FF15[00000000]              call [printf]
    49 0000006B 83C404                      add esp, 4*1
    50 0000006E FF35[08000000]              push dword [c]
    51 00000074 68[5C000000]                push format_hexadecimal
    52 00000079 FF15[00000000]              call [printf]
    53 0000007F 83C408                      add ESP, 4*2
    54                                      
    55 00000082 6A00                        push dword 0      ; place on stack parameter for exit
    56 00000084 FF15[00000000]              call [exit]       ; call exit to terminate the program
