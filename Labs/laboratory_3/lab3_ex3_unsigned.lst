     1                                  
     2                                      ; x/2+100*(a+b)-3/(c+d)+e*e
     3                                      ; a,c-word
     4                                      ; b,d-byte
     5                                      ; e-doubleword
     6                                      ; x-qword
     7                                  
     8                                  bits 32
     9                                  global start
    10                                  extern exit
    11                                  import exit msvcrt.dll
    12                                  segment data use32 class = data
    13 00000000 0C00                        a DW 12
    14 00000002 0100                        c DW 1
    15 00000004 17                          b DB 23
    16 00000005 01                          d DB 1
    17 00000006 78000000                    e DD 120
    18 0000000A DA07000000000000            x DQ 2010
    19                                  segment code use32 class= code
    20                                  start:
    21                                      ; The result will be stored in the ECX register
    22                                      
    23                                      ; x/2
    24 00000000 A1[0A000000]                mov EAX, dword [x] ; the lower part of the qword x in the EAX register
    25 00000005 8B15[0E000000]              mov EDX, dword [x+4] ; the higher part of the qword in the EDX register
    26                                      ; EAX:EDX <- x = 2010
    27 0000000B BB02000000                  mov EBX, 2 ; moving 2 in the EBX register so we can divide the qword
    28 00000010 F7F3                        div EBX 
    29                                      ; EAX <- EAX:EDX / EBX = 1005 , EDX <- EAX:EDX % EBX = 0
    30 00000012 89C1                        mov ECX, EAX ; moving x/2 in the ECX register
    31                                      
    32                                      ; 100*(a+b)
    33 00000014 A0[04000000]                mov AL, [b] ; AL <- b = 23
    34 00000019 B400                        mov AH, 0   ; AH <- 0  => AX = 23
    35 0000001B 660305[00000000]            add AX, [a] ; AX <- AX + a = 35
    36 00000022 66BB6400                    mov BX, 100 ; BX gets the value 100, so we can multiply the AX register
    37 00000026 66F7E3                      mul BX ; AX:DX <- AX * BX = 3500
    38 00000029 6652                        push DX ;the high part of the doubleword DX:AX is saved on the stack
    39 0000002B 6650                        push AX ;the low part of the doubleword DX:AX is saved on the stack
    40 0000002D 58                          pop EAX ; EAX <- 100*(a+b) = 3500
    41 0000002E 01C1                        add ECX, EAX ; ECX <- ECX + EAX = 4505 = x/2+100*(a+b)
    42                                      
    43                                      ; 3/(c+d)
    44 00000030 8A1D[05000000]              mov BL, [d] ; BL <- d = 1
    45 00000036 B700                        mov BH, 0 ; BH <- 0  => BX = 1
    46 00000038 66031D[02000000]            add BX, [c] ; BX <- BX + c = 2
    47 0000003F B803000000                  mov EAX, 3 ; we move 3 in EAX so we can divide it by c+d
    48 00000044 66F7F3                      div BX ; AX <- EAX / BX = 1,  DX <- EAX%BX = 1
    49 00000047 666A00                      push word 0 ; adding a word with the value 0 to the stack
    50 0000004A 6650                        push AX ; adding the value in AX to the stack
    51 0000004C 58                          pop EAX ; putting the value from the stack in the EAX register
    52                                      ; EAX <- AX = 1
    53 0000004D 01C1                        add ECX, EAX ; ECX <- ECX + EAX = 4506
    54                                      
    55                                      ;e*e
    56 0000004F A1[06000000]                mov EAX, [e]
    57 00000054 F725[06000000]              mul dword [e] ; EDX:EAX <- e*e = 14400
    58                                     
    59                                  
    60 0000005A BB00000000                  mov EBX, 0 ; making EBX 0, so we have the qword EBX:ECX = ECX = 4506
    61                                      ; adding the qwords:  EDX:EAX <- EDX:EAX + EBX:ECX = 18906
    62 0000005F 01C8                        add EAX, ECX
    63 00000061 11DA                        adc EDX, EBX
    64 00000063 6A00                        push dword 0
    65 00000065 FF15[00000000]              call [exit]
