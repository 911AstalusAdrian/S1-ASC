     1                                  
     2                                      ; x/2+100*(a+b)-3/(c+d)+e*e
     3                                      ; a,c-word
     4                                      ; b,d-byte
     5                                      ; e-doubleword
     6                                      ; x-qword
     7                                  
     8                                  bits 32
     9                                  global start
    10                                  extern exit
    11                                  import exit msvcrt.dll
    12                                  segment data use32 class = data
    13 00000000 1900                        a DW 25
    14 00000002 0100                        c DW 1
    15 00000004 E0                          b DB -32
    16 00000005 01                          d DB 1
    17 00000006 D2000000                    e DD 210
    18 0000000A 800D000000000000            x DQ 3456
    19                                  segment code use32 class= code
    20                                  start:
    21                                      ; the result will be stored in EDX:EAX
    22                                      ; x/2
    23                                      ; x is a qword, so we put it into EDX:EAX
    24 00000000 A1[0A000000]                mov EAX, dword [x] ; Lower part of x in EAX
    25 00000005 8B15[0E000000]              mov EDX, dword [x+4] ; Higher part of x in EDX 
    26 0000000B BB02000000                  mov EBX, 2 ; 2 in EBX so we can divide EDX:EAX by 2
    27 00000010 F7FB                        idiv EBX ; EAX <- EDX:EAX/EBX = 1728 , EDX <- EDX:EAX%EBX = 0
    28 00000012 89C3                        mov EBX, EAX ; clearing EAX register
    29                                      ; EBX <- EAX  = 1728
    30                                      
    31                                      ; 100*(a+b)
    32 00000014 A0[04000000]                mov AL, [b] ; byte b in the AL register ; AL <- b = -32
    33 00000019 6698                        cbw ; converting the byte AL into the word AX ; AX <- b = -2
    34 0000001B 660305[00000000]            add AX, [a] ; AX <- AX + a = -7
    35 00000022 66B96400                    mov CX, 100
    36 00000026 66F7E9                      imul CX ; DX:AX <- AX*CX = -700
    37 00000029 6652                        push DX ; higher part of DX:AX in the stack
    38 0000002B 6650                        push AX ; lower part of DX:AX in the stack
    39 0000002D 58                          pop EAX ; EAX <- DX:AX = -700
    40 0000002E 01C3                        add EBX, EAX ; EBX <- EBX+EAX = 1028 = x/2 + 100*(a+b)
    41                                      
    42                                      ; 3/(c+d)
    43 00000030 A0[05000000]                mov AL, [d] ; AL <- d = 1
    44 00000035 6698                        cbw ; converting AL into AX so we can add a word
    45 00000037 660305[02000000]            add AX, [c] ; AX <- AX + c = 2
    46 0000003E 6689C1                      mov CX, AX ; clearing the AX register, CX <- AX = 2
    47 00000041 66B80300                    mov AX, 3
    48 00000045 6699                        cwd ; putting 3 in DX:AX so we can divide it by c+d
    49 00000047 66F7F9                      idiv CX ; AX <- DX:AX/CX, DX <- DX:AX%CX
    50                                      ; getting the value in AX in EAX
    51 0000004A 666A00                      push word 0
    52 0000004D 6650                        push AX
    53 0000004F 58                          pop EAX
    54 00000050 29C3                        sub EBX, EAX ; EBX <- EBX - EAX = 1027 = x/2 + 100*(a+b) - 3/(c+d)
    55                                      
    56                                      ; e*e
    57 00000052 B900000000                  mov ECX, 0 ; making ECX 0, so we can have the value of EBX on ECX:EBX
    58 00000057 A1[06000000]                mov EAX, [e] ; EAX <- e = 210
    59 0000005C F72D[06000000]              imul dword [e] ; EDX:EAX <- EAX * e = 44100
    60                                      
    61                                      ;x/2 + 100*(a+b) - 3/(c+d) + e*e 
    62 00000062 01D8                        add EAX, EBX ; adding EBX to EAX
    63 00000064 11CA                        adc EDX, ECX ; adding ECX to EDX (with carry)
    64                                      ; EDX:EAX = 45217
    65 00000066 6A00                        push dword 0
    66 00000068 FF15[00000000]              call [exit]
